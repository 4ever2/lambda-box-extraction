--- a/src/Decimal.ml
+++ b/src/Decimal.ml
@@ -51,6 +51,10 @@ let rec uint_rec f f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 = function
 | D8 u0 -> f8 u0 (uint_rec f f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 u0)
 | D9 u0 -> f9 u0 (uint_rec f f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 u0)

+type decimal_int =
+     | DecimalPos of uint
+     | DecimalNeg of uint
+
 type decimal =
 | Decimal of decimal_int * uint
 | DecimalExp of decimal_int * uint * decimal_int
--- a/src/Decimal.mli
+++ b/src/Decimal.mli
@@ -25,6 +25,10 @@ val uint_rec :
   (uint -> 'a1 -> 'a1) -> (uint -> 'a1 -> 'a1) -> (uint -> 'a1 -> 'a1) ->
   (uint -> 'a1 -> 'a1) -> uint -> 'a1

+type decimal_int =
+  | DecimalPos of uint
+  | DecimalNeg of uint
+
 type decimal =
 | Decimal of decimal_int * uint
 | DecimalExp of decimal_int * uint * decimal_int
--- a/src/hexadecimal.ml
+++ b/src/hexadecimal.ml
@@ -112,6 +112,10 @@ let rec uint_rec f f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 = funct
 | Df u0 ->
   f15 u0 (uint_rec f f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 u0)

+type hexadecimal_int =
+| HexadecimalPos of uint
+| HexadecimalNeg of uint
+
 type hexadecimal =
 | Hexadecimal of hexadecimal_int * uint
 | HexadecimalExp of hexadecimal_int * uint * decimal_int
--- a/src/hexadecimal.mli
+++ b/src/hexadecimal.mli
@@ -36,6 +36,10 @@ val uint_rec :
   (uint -> 'a1 -> 'a1) -> (uint -> 'a1 -> 'a1) -> (uint -> 'a1 -> 'a1) ->
   (uint -> 'a1 -> 'a1) -> uint -> 'a1

+type hexadecimal_int =
+| HexadecimalPos of uint
+| HexadecimalNeg of uint
+
 type hexadecimal =
 | Hexadecimal of hexadecimal_int * uint
 | HexadecimalExp of hexadecimal_int * uint * decimal_int
--- a/src/number0.ml
+++ b/src/number0.ml
@@ -9,6 +9,10 @@ type number =
 | Decimal of decimal
 | Hexadecimal of hexadecimal

+type number_int =
+| IntDecimal of Decimal.decimal_int
+| IntHexadecimal of Hexadecimal.hexadecimal_int
+
 (** val uint_beq : uint -> uint -> bool **)

 let uint_beq x y =
--- a/src/number0.mli
+++ b/src/number0.mli
@@ -9,6 +9,10 @@ type number =
 | Decimal of decimal
 | Hexadecimal of hexadecimal

+type number_int =
+| IntDecimal of Decimal.decimal_int
+| IntHexadecimal of Hexadecimal.hexadecimal_int
+
 val uint_beq : uint -> uint -> bool

 val uint_eq_dec : uint -> uint -> bool
